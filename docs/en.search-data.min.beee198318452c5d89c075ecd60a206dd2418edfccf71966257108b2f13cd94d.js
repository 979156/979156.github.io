'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/docs/examples/','title':"Examples",'content':""});index.add({'id':1,'href':'/docs/examples/jwt_auth/','title':"JWT Auth",'content':"JWT Auth Example to run atreugo server with basic JWT authentication. \nmain.go\npackage main import ( \u0026#34;fmt\u0026#34; \u0026#34;github.com/savsgio/atreugo/v11\u0026#34; \u0026#34;github.com/savsgio/go-logger/v2\u0026#34; \u0026#34;github.com/valyala/fasthttp\u0026#34; ) func init() { //nolint:gochecknoinits \tlogger.SetLevel(logger.DEBUG) } func main() { config := atreugo.Config{ Addr: \u0026#34;0.0.0.0:8000\u0026#34;, } server := atreugo.New(config) // Register authentication middleware at first of all \tserver.UseBefore(authMiddleware) // Register index route \tserver.GET(\u0026#34;/\u0026#34;, func(ctx *atreugo.RequestCtx) error { return ctx.HTTPResponse(fmt.Sprintf(`\u0026lt;h1\u0026gt;You are login with JWT\u0026lt;/h1\u0026gt; JWT cookie value: %s`, ctx.Request.Header.Cookie(\u0026#34;atreugo_jwt\u0026#34;))) }) // Register login route \tserver.GET(\u0026#34;/login\u0026#34;, func(ctx *atreugo.RequestCtx) error { qUser := []byte(\u0026#34;savsgio\u0026#34;) qPasswd := []byte(\u0026#34;mypasswd\u0026#34;) jwtCookie := ctx.Request.Header.Cookie(\u0026#34;atreugo_jwt\u0026#34;) if len(jwtCookie) == 0 { tokenString, expireAt := generateToken(qUser, qPasswd) // Set cookie for domain \tcookie := fasthttp.AcquireCookie() defer fasthttp.ReleaseCookie(cookie) cookie.SetKey(\u0026#34;atreugo_jwt\u0026#34;) cookie.SetValue(tokenString) cookie.SetExpire(expireAt) ctx.Response.Header.SetCookie(cookie) } return ctx.RedirectResponse(\u0026#34;/\u0026#34;, ctx.Response.StatusCode()) }) // Run \tif err := server.ListenAndServe(); err != nil { panic(err) } } auth_utils.go\npackage main import ( \u0026#34;time\u0026#34; \u0026#34;github.com/dgrijalva/jwt-go\u0026#34; \u0026#34;github.com/savsgio/go-logger/v2\u0026#34; ) var jwtSignKey = []byte(\u0026#34;TestForFasthttpWithJWT\u0026#34;) type userCredential struct { Username []byte `json:\u0026#34;username\u0026#34;` Password []byte `json:\u0026#34;password\u0026#34;` jwt.StandardClaims } func generateToken(username []byte, password []byte) (string, time.Time) { logger.Debugf(\u0026#34;Create new token for user %s\u0026#34;, username) expireAt := time.Now().Add(1 * time.Minute) // Embed User information to `token` \tnewToken := jwt.NewWithClaims(jwt.SigningMethodHS512, \u0026amp;userCredential{ Username: username, Password: password, StandardClaims: jwt.StandardClaims{ ExpiresAt: expireAt.Unix(), }, }) // token -\u0026gt; string. Only server knows the secret. \ttokenString, err := newToken.SignedString(jwtSignKey) if err != nil { logger.Error(err) } return tokenString, expireAt } func validateToken(requestToken string) (*jwt.Token, *userCredential, error) { logger.Debug(\u0026#34;Validating token...\u0026#34;) user := \u0026amp;userCredential{} token, err := jwt.ParseWithClaims(requestToken, user, func(token *jwt.Token) (interface{}, error) { return jwtSignKey, nil }) return token, user, err } middlewares.go\npackage main import ( \u0026#34;errors\u0026#34; \u0026#34;github.com/savsgio/atreugo/v11\u0026#34; \u0026#34;github.com/valyala/fasthttp\u0026#34; ) // checkTokenMiddleware middleware to check jwt token authorization func authMiddleware(ctx *atreugo.RequestCtx) error { // Avoid middleware when you are going to login view \tif string(ctx.Path()) == \u0026#34;/login\u0026#34; { return ctx.Next() } jwtCookie := ctx.Request.Header.Cookie(\u0026#34;atreugo_jwt\u0026#34;) if len(jwtCookie) == 0 { return ctx.ErrorResponse(errors.New(\u0026#34;login required\u0026#34;), fasthttp.StatusForbidden) } token, _, err := validateToken(string(jwtCookie)) if err != nil { return err } if !token.Valid { return ctx.ErrorResponse(errors.New(\u0026#34;your session is expired, login again please\u0026#34;), fasthttp.StatusForbidden) } return ctx.Next() } "});index.add({'id':2,'href':'/docs/examples/middlewares/','title':"Middlewares",'content':"CORS Example to run Atreugo server with CORS middleware \nmain.go\npackage main import ( \u0026#34;github.com/atreugo/middlewares/cors\u0026#34; \u0026#34;github.com/savsgio/atreugo/v11\u0026#34; ) func main() { config := atreugo.Config{ Addr: \u0026#34;0.0.0.0:8001\u0026#34;, } server := atreugo.New(config) cors := cors.New(cors.Config{ AllowedOrigins: []string{\u0026#34;http://localhost:8001\u0026#34;, \u0026#34;null\u0026#34;}, AllowedHeaders: []string{\u0026#34;Content-Type\u0026#34;, \u0026#34;X-Custom\u0026#34;}, AllowedMethods: []string{\u0026#34;GET\u0026#34;, \u0026#34;POST\u0026#34;, \u0026#34;PUT\u0026#34;, \u0026#34;DELETE\u0026#34;}, ExposedHeaders: []string{\u0026#34;Content-Length\u0026#34;, \u0026#34;Authorization\u0026#34;}, AllowCredentials: true, AllowMaxAge: 5600, }) server.UseAfter(cors) server.GET(\u0026#34;/\u0026#34;, func(ctx *atreugo.RequestCtx) error { return ctx.JSONResponse(atreugo.JSON{\u0026#34;Method\u0026#34;: \u0026#34;GET\u0026#34;}) }) server.POST(\u0026#34;/\u0026#34;, func(ctx *atreugo.RequestCtx) error { return ctx.JSONResponse(atreugo.JSON{\u0026#34;Method\u0026#34;: \u0026#34;POST\u0026#34;}) }) server.PUT(\u0026#34;/\u0026#34;, func(ctx *atreugo.RequestCtx) error { return ctx.JSONResponse(atreugo.JSON{\u0026#34;Method\u0026#34;: \u0026#34;PUT\u0026#34;}) }) server.DELETE(\u0026#34;/\u0026#34;, func(ctx *atreugo.RequestCtx) error { return ctx.JSONResponse(atreugo.JSON{\u0026#34;Method\u0026#34;: \u0026#34;DELETE\u0026#34;}) }) if err := server.ListenAndServe(); err != nil { panic(err) } } Custom Example to creates an atreugo server with middlewares. \nmain.go\npackage main import ( \u0026#34;github.com/savsgio/atreugo/v11\u0026#34; ) func main() { config := atreugo.Config{ Addr: \u0026#34;0.0.0.0:8000\u0026#34;, } server := atreugo.New(config) // Register before middlewares \tserver.UseBefore(beforeGlobal) // Register after middlewares \tserver.UseAfter(afterGlobal) server.GET(\u0026#34;/\u0026#34;, func(ctx *atreugo.RequestCtx) error { return ctx.TextResponse(\u0026#34;Middlewares example\u0026#34;) }).UseBefore(beforeView).UseAfter(afterView) // Run \tif err := server.ListenAndServe(); err != nil { panic(err) } } middlewares.go\npackage main import ( \u0026#34;github.com/savsgio/atreugo/v11\u0026#34; \u0026#34;github.com/savsgio/go-logger/v2\u0026#34; ) func beforeGlobal(ctx *atreugo.RequestCtx) error { logger.Info(\u0026#34;Middleware executed BEFORE GLOBAL\u0026#34;) return ctx.Next() } func afterGlobal(ctx *atreugo.RequestCtx) error { logger.Info(\u0026#34;Middleware executed AFTER GLOBAL\u0026#34;) return ctx.Next() } func beforeView(ctx *atreugo.RequestCtx) error { logger.Info(\u0026#34;Middleware executed BEFORE VIEW\u0026#34;) return ctx.Next() } func afterView(ctx *atreugo.RequestCtx) error { logger.Info(\u0026#34;Middleware executed AFTER VIEW\u0026#34;) return ctx.Next() } "});})();